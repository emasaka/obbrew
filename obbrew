#!/bin/bash

OBBREWDIR=~/.obbrew
BINDIR=~/bin
MANDIR=~/.local/share/man

OBBREWTMP=''

declare -A REPOS
while read -r pgm repo; do
    REPOS[$pgm]=$repo
done <<'EOF'
peco	peco/peco
ripgrep	BurntSushi/ripgrep
hub	github/hub
EOF

die() {
    echo "obbrew: $1" 1>&2
    exit 1
}

show_usage() {
    echo 'usage: obbrew <subcommand>'
}

usage() {
    show_usage
    exit 1
}

cleanup() {
    [[ -n "$OBBREWTMP" ]] && rm -rf "$OBBREWTMP"
}

if type aria2c >/dev/null; then
    download() {
        local url=$1 dir=$2 file=$3
        aria2c -q -d "$dir" -o "$file" "$url" || die "download failed: $url"
    }
elif type wget >/dev/null; then
    download() {
        local url=$1 dir=$2 file=$3
        wget -q -P "$dir" -O "$file" "$url" || die "download failed: $url"
    }
else
    download() {
        local url=$1 dir=$2 file=$3
        curl -s -Lo "$dir/$file" "$url" || die "download failed: $url"
    }
fi

maybe_create_obbrewdir() {
    mkdir -p "$OBBREWDIR/"{src,archive}
}

fetch_pgm_info() {
    local pgm=$1
    local repo=$2
    : ${OBBREWTMP:=$(mktemp -d)}
    download "https://api.github.com/repos/${repo}/releases/latest" "$OBBREWTMP" "${pgm}.json"
}

declare -A SUBCMD_FUNC
declare -A ALIAS_SUBCMD
declare -A HELP_SUBCMD

show_subcmd_help() {
    local pgm=$1
    [[ -n "${ALIAS_SUBCMD[$pgm]}" ]] && pgm="${ALIAS_SUBCMD[$pgm]}"
    if [[ -n "${HELP_SUBCMD[$pgm]}" ]]; then
        echo "obbrew ${HELP_SUBCMD[$pgm]}"
    else
        die "unknown subcommand: $pgm"
    fi
}

show_help() {
    show_usage
    echo
    for pgm in "${!HELP_SUBCMD[@]}"; do
        echo "    ${HELP_SUBCMD[$pgm]}"
    done
}

cmd_install() {
    local pgm=$1
    [[ -n "${REPOS[$pgm]}" ]] || die "don't know '$pgm'"
    fetch_pgm_info "$pgm" "${REPOS[$pgm]}"
    maybe_create_obbrewdir
    local ver=$(jq -r .tag_name "${OBBREWTMP}/${pgm}.json")

    # fetch archive
    [[ -d "$OBBREWDIR/archive/$pgm/$ver" ]] && die "$pgm $ver already exists"
    mkdir -p "$OBBREWDIR/archive/$pgm/$ver"
    jq '[.assets[]|select(.name|contains("linux"))|select(.name|contains("64"))][0]' "$OBBREWTMP/${pgm}.json" > "$OBBREWTMP/${pgm}-file.json"
    download $(jq -r .browser_download_url "$OBBREWTMP/${pgm}-file.json") "$OBBREWDIR/archive/$pgm/$ver" $(jq -r .name "$OBBREWTMP/${pgm}-file.json")

    # extract archive
    mkdir -p "$OBBREWDIR/src/$pgm/$ver"
    tar xf "$OBBREWDIR/archive/$pgm/$ver/"* -C "$OBBREWDIR/src/$pgm/$ver"

    # install files
    mkdir -p "$BINDIR"
    cp -p $(find "$OBBREWDIR/src/$pgm/$ver" -type f -executable) "$BINDIR"
    local manfile=$(find "$OBBREWDIR/src/$pgm/$ver" -type f -name '*.1')
    if [[ -n "$manfile" ]]; then
        mkdir -p "$MANDIR/man.1"
        cp -p $manfile "$MANDIR/man.1"
    fi
    echo "obbrewdir: installed $pgm $ver"
}

SUBCMD_FUNC[install]=cmd_install
HELP_SUBCMD[install]='install <program>: Download and install a program'

cmd_ls() {
    maybe_create_obbrewdir
    ls -1 "$OBBREWDIR"/src
}

SUBCMD_FUNC[ls]=cmd_ls
HELP_SUBCMD[ls]='ls|list: List installed programs'
ALIAS_SUBCMD[list]=ls

cmd_ls-remote() {
    local pgm
    for pgm in "${!REPOS[@]}"; do
        echo "$pgm"
    done
}

SUBCMD_FUNC[ls-remote]=cmd_ls-remote
HELP_SUBCMD[ls-remote]='ls-remote: List programs available for install'

cmd_outdated() {
    local pgm ver_cur ver_src
    for pgm in $(cmd_ls); do
        fetch_pgm_info "$pgm" "${REPOS[$pgm]}"
        ver_cur=$(ls -1vr "$OBBREWDIR/src/$pgm" | head -n 1)
        ver_src=$(jq -r .tag_name "${OBBREWTMP}/${pgm}.json")
        [[ "$ver_cur" == "$ver_src" ]] || echo "$pgm $ver_cur -> $ver_src"
    done
}

SUBCMD_FUNC[outdated]=cmd_outdated
HELP_SUBCMD[outdated]='outdated: List outdated programs'

cmd_open() {
    local pgm=$1
    [[ -n "${REPOS[$pgm]}" ]] || die "don't know '$pgm'"
    xdg-open "https://github.com/${REPOS[$pgm]}/releases"
}

SUBCMD_FUNC[open]=cmd_open
HELP_SUBCMD[open]='open <program>: Open release page on GitHub'

cmd_help() {
    if [[ -n "$1" ]]; then
        show_subcmd_help "$1"
    else
        show_help
    fi
}

SUBCMD_FUNC[help]=cmd_help
HELP_SUBCMD[help]='help [<program>]: Show help text'

trap cleanup EXIT

subcmd=$1
[[ -z "$subcmd" ]] && usage
[[ -n "${ALIAS_SUBCMD[$subcmd]}" ]] && subcmd="${ALIAS_SUBCMD[$subcmd]}"
if [[ -n "${SUBCMD_FUNC[$subcmd]}" ]]; then
    shift
    "${SUBCMD_FUNC[$subcmd]}" "$@"
else
    usage
fi
